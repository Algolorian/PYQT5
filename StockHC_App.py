# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'StockHC.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from tkinter.messagebox import *
import tkinter
import os

root = tkinter.Tk()
root.withdraw()


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(270, 195)
        MainWindow.setUnifiedTitleAndToolBarOnMac(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.update_pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.update_pushButton.setGeometry(QtCore.QRect(10, 70, 111, 41))
        self.update_pushButton.setObjectName("update_pushButton")
        self.matches_comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.matches_comboBox.setGeometry(QtCore.QRect(10, 30, 111, 22))
        self.matches_comboBox.setObjectName("matches_comboBox")
        self.matches_comboBox.addItem("")
        self.matches_comboBox.addItem("")
        self.matches_comboBox.addItem("")
        self.matches_comboBox.addItem("")
        self.matches_comboBox.addItem("")
        self.matches_comboBox.addItem("")
        self.matches_comboBox.addItem("")
        self.matches_comboBox.addItem("")
        self.matches_comboBox.addItem("")
        self.matches_comboBox.addItem("")
        self.matches_comboBox.addItem("")
        self.matches_comboBox.addItem("")
        self.ticker_lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.ticker_lineEdit.setGeometry(QtCore.QRect(150, 30, 113, 20))
        self.ticker_lineEdit.setObjectName("ticker_lineEdit")
        self.refresh_pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.refresh_pushButton.setGeometry(QtCore.QRect(150, 70, 111, 41))
        self.refresh_pushButton.setObjectName("refresh_pushButton")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 10, 61, 21))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(150, 10, 61, 21))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.yahoo_pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.yahoo_pushButton.setGeometry(QtCore.QRect(10, 130, 111, 23))
        self.yahoo_pushButton.setObjectName("yahoo_pushButton")
        self.info_pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.info_pushButton.setGeometry(QtCore.QRect(150, 130, 111, 23))
        self.info_pushButton.setObjectName("info_pushButton")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 270, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "StockHC"))
        self.update_pushButton.setText(_translate("MainWindow", "Update Database"))
        self.matches_comboBox.setItemText(0, _translate("MainWindow", "12"))
        self.matches_comboBox.setItemText(1, _translate("MainWindow", "4"))
        self.matches_comboBox.setItemText(2, _translate("MainWindow", "8"))
        self.matches_comboBox.setItemText(3, _translate("MainWindow", "16"))
        self.matches_comboBox.setItemText(4, _translate("MainWindow", "20"))
        self.matches_comboBox.setItemText(5, _translate("MainWindow", "24"))
        self.matches_comboBox.setItemText(6, _translate("MainWindow", "28"))
        self.matches_comboBox.setItemText(7, _translate("MainWindow", "32"))
        self.matches_comboBox.setItemText(8, _translate("MainWindow", "36"))
        self.matches_comboBox.setItemText(9, _translate("MainWindow", "40"))
        self.matches_comboBox.setItemText(10, _translate("MainWindow", "44"))
        self.matches_comboBox.setItemText(11, _translate("MainWindow", "48"))
        self.refresh_pushButton.setText(_translate("MainWindow", "Refresh"))
        self.label.setText(_translate("MainWindow", "Matches"))
        self.label_2.setText(_translate("MainWindow", "Ticker"))
        self.yahoo_pushButton.setText(_translate("MainWindow", "Yahoo Finance"))
        self.info_pushButton.setText(_translate("MainWindow", "Info"))

        self.ticker_lineEdit.textChanged.connect(self.lineEditProper)
        self.update_pushButton.clicked.connect(self.update)
        self.refresh_pushButton.clicked.connect(self.refresh)
        self.yahoo_pushButton.clicked.connect(self.yahoo)
        self.info_pushButton.clicked.connect(self.info)

    def lineEditProper(self):
        # self.matches_comboBox.currentText()
        # self.ticker_lineEdit.text()
        text = self.ticker_lineEdit.text()
        new_text = ''
        for i in range(len(text)):
            if text[i].isalpha():
                new_text = new_text + text[i]
        if len(new_text) > 4:
            new_text = new_text[0:5]
        self.ticker_lineEdit.setText(new_text.upper())

    def info(self):
        info_text = '''
        Matches: Matches is the number of lines you want
                to be graphed,
                example 1 // 4 would graph the 4 closest patterns
                example 2 // 8 would graph the 8 closest patterns

        Ticker:  The Ticker is the stock ticker you want to analyse

        Update Database: This button downloads the data 
                        required to analyse the stock, this process 
                        can take a while if you have never scanned 
                        the stock before, it is required for stocks
                        you haven't analysed before but takes less
                        time on ones you have

        Info: The Info button displays the information page you
        are now seeing'''
        showinfo(title='This is the information page for StockHC',
                 message=info_text)

    def yahoo(self):
        ticker = self.ticker_lineEdit.text()
        if ticker != '':
            os.system('start https://finance.yahoo.com/quote/' + ticker)
        else:
            os.system('start https://finance.yahoo.com/')

    def update(self):
        pass

    def refresh(self):
        pass


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
